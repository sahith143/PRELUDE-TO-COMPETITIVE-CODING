** Implementation of Deque using circular array **
#include <iostream>
using namespace std;

class Deque {
private:
    int *arr;
    int front, rear, size, capacity;

public:
    Deque(int capacity) {
        this->capacity = capacity;
        this->size = 0;
        this->front = 0;
        this->rear = capacity - 1;
        this->arr = new int[capacity];
    }

    bool isFull() {
        return size == capacity;
    }

    bool isEmpty() {
        return size == 0;
    }

    void insertFront(int x) {
        if (isFull()) {
            cout << "Deque is full. Cannot insert element." << endl;
            return;
        }

        front = (front + capacity - 1) % capacity;
        arr[front] = x;
        size++;
    }

    void insertRear(int x) {
        if (isFull()) {
            cout << "Deque is full. Cannot insert element." << endl;
            return;
        }

        rear = (rear + 1) % capacity;
        arr[rear] = x;
        size++;
    }

    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete element." << endl;
            return;
        }

        front = (front + 1) % capacity;
        size--;
    }

    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete element." << endl;
            return;
        }

        rear = (rear + capacity - 1) % capacity;
        size--;
    }

    int getFront() {
        if (isEmpty()) {
            cout << "Deque is empty." << endl;
            return -1;
        }

        return arr[front];
    }

    int getRear() {
        if (isEmpty()) {
            cout << "Deque is empty." << endl;
            return -1;
        }

        return arr[rear];
    }

    int getSize() {
        return size;
    }

    void printDeque() {
        int i = front;
        while (i != rear) {
            cout << arr[i] << " ";
            i = (i + 1) % capacity;
        }
        cout << arr[rear] << endl;
    }
};

int main() {
    Deque dq(5);
    dq.insertFront(10);
    dq.insertRear(20);
    dq.insertFront(30);
    dq.insertRear(40);
    dq.printDeque();
    dq.deleteFront();
    dq.deleteRear();
    cout << dq.getFront() << endl;
    cout << dq.getRear() << endl;
    cout << dq.getSize() << endl;
    dq.printDeque();
    return 0;
}
