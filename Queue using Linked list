** Creation of queue using linked list **
#include <iostream>
using namespace std;

// Node class to define a node of the linked list
class Node {
public:
    int data;
    Node* next;
};

// Queue class to implement a queue using a linked list
class Queue {
private:
    Node* front; // Pointer to the front of the queue
    Node* rear; // Pointer to the rear of the queue
public:
    // Constructor to initialize front and rear as NULL
    Queue() {
        front = NULL;
        rear = NULL;
    }

    // Function to add a new element to the queue
    void enqueue(int x) {
        Node* temp = new Node; // Allocate memory for new node
        temp->data = x; // Assign data to new node
        temp->next = NULL; // Initialize next as NULL
        if (front == NULL && rear == NULL) { // If the queue is empty
            front = rear = temp; // Set front and rear as the new node
            return;
        }
        rear->next = temp; // Link the new node at the end of the queue
        rear = temp; // Set rear as the new node
    }

    // Function to remove the front element from the queue
    void dequeue() {
        Node* temp = front; // Store front node
        if (front == NULL) return; // If queue is empty, nothing to dequeue
        if (front == rear) { // If there is only one element in the queue
            front = rear = NULL; // Set front and rear as NULL
        } else {
            front = front->next; // Move front pointer to the next node
        }
        delete temp; // Free memory of the dequeued node
    }

    // Function to check the front element of the queue
    int peek() {
        if (front == NULL) { // If queue is empty
            cout << "Queue is empty" << endl;
            return -1;
        }
        return front->data; // Return data of the front node
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return (front == NULL);
    }

    // Function to display the elements of the queue
    void display() {
        if (front == NULL) { // If queue is empty
            cout << "Queue is empty" << endl;
            return;
        }
        Node* temp = front; // Store front node
        while (temp != NULL) { // Traverse the queue
            cout << temp->data << " "; // Display data of the node
            temp = temp->next; // Move to the next node
        }
        cout << endl;
    }
};

int main() {
    Queue q; // Create a queue object
    q.enqueue(10); // Add elements to the queue
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.display(); // Display the elements of the queue
    cout << "Front element: " << q.peek() << endl; // Check the front element
    q.dequeue(); // Remove the front element
    q.display(); // Display the elements of the queue
    cout << "Front element: " << q.peek() << endl; // Check the front element
    return 0;
}
