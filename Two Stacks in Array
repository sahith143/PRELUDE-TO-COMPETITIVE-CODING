** Implement two Stacks in an array **
#include <iostream>
using namespace std;

class TwoStacks {
private:
    int* arr;  // array to hold the elements
    int size;  // total size of the array
    int top1, top2;  // tops of the two stacks
public:
    TwoStacks(int n) {
        size = n;
        arr = new int[size];
        top1 = -1;  // top of the first stack
        top2 = size;  // top of the second stack
    }
    void push1(int x) {
        if (top1 < top2 - 1) {
            arr[++top1] = x;
        }
        else {
            cout << "Stack Overflow!" << endl;
        }
    }
    void push2(int x) {
        if (top1 < top2 - 1) {
            arr[--top2] = x;
        }
        else {
            cout << "Stack Overflow!" << endl;
        }
    }
    int pop1() {
        if (top1 >= 0) {
            return arr[top1--];
        }
        else {
            cout << "Stack Underflow!" << endl;
            return -1;
        }
    }
    int pop2() {
        if (top2 < size) {
            return arr[top2++];
        }
        else {
            cout << "Stack Underflow!" << endl;
            return -1;
        }
    }
    void display1() {
        cout << "Elements of Stack 1: ";
        for (int i = top1; i >= 0; i--) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
    void display2() {
        cout << "Elements of Stack 2: ";
        for (int i = top2; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    TwoStacks s(6);
    s.push1(1);
    s.push1(2);
    s.push1(3);
    s.push2(4);
    s.push2(5);
    s.push2(6);
    s.display1();
    s.display2();
    s.pop1();
    s.pop2();
    s.display1();
    s.display2();
    return 0;
}
